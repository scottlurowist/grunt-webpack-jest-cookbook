
1. npm init - y
	- This create the package.json file

2. Add "private": true to the object in package.json.
	- This prevents the package from being published.

pakage.json will contain
   "main": "index.js"
   This is an entry point to the node application.

 create folder "src" in the root directory.

 create index.js and leave it empty for now. 


Add git to make a Git repository.
    - git init    

Commit

Step 2
npm install --save-dev grunt

Now grunt is installed. 
Create "Gruntfile.js" include the following:
module.exports = grunt => {

    // Our main configuration.
    grunt.initConfig({});


    // Sample custom tasks...
    grunt.registerTask('speak', () => {
        console.log('Speaking...');
    });

    grunt.registerTask('yell', () => {
        console.log('YELLING...');
    });

    grunt.registerTask('both', ['speak', 'yell']);
}

This creates a bare-bones Gruntfile.js. We initialize our plugins in grunt.initConfig().
But we have no plugins are the moment. So we leave it empty.

We create two custom tasks that we can run with:
grunt speak
grunt yell.

We can combine them into a task called "both". speak ill eecute bfore yell.
grunt both


Commit

install Jest but to run Jest we need to be able to invoke it as a command from Grunt.
There is no supported Grunt plugin at this time.

npm install --save-dev grunt-run
npm install --save-dev jest

add the following to empty index.js so that we have something to test:
const addNumbers = (x, y) => {
    return x + y;
}

module.exports = addNumbers;

Create a "specs" folder in our project folder. In there create "index.spec.js". Add the following to it:

const addNumbers = require('../src/index');


describe("addNumber()", () => {

    it("should return 5", () => {

        const actualResult = addNumbers(2, 3);

        expect(actualResult).toEqual(5);
    });
});

Now we have somethign to test, and a test itself.But as stated earlier, there is not current
Jest Grunt plugin. So, replace our
test script in package.json with
    "test": "jest"

To make sure that this works.
Type "npm jest" at the terminal, and one should pass.

Now we need to configure grunt-run so that we can run this with Grunt.

Add this to Gruntfile.js our config section should now look like this:

    // Our main configuration.
    grunt.initConfig({
        run: {
            options: {
              // Task-specific options go here.
            },
            test: {
              cmd: 'npm',
              args: [
                'test'
              ]
            }
        }           
    });

Then add this line at the bottom of our Grunt function:
      grunt.loadNpmTasks('grunt-run');
      grunt.registerTask('test', ['run:test:cmd'])

This will now invoke our earlier command "npm test" from within Grunt itself as such:

Type: grunt test

Now we can invoke Jest from Grunt. It is also quite confusing to invoke Jest with webpack,
so we use Grunt to give us a consistent interface for issuing build and run commands.


Commit


Install webpack with the following:
npm install --save-dev webpack webpack-cli

now add the following line inside the "scripts" key in package.json

  "scripts": {
    "build": "webpack",
    "test": "jest"
  },

  Now at the command line run "npm run build". Webpack should now run. When it completes
  we now have a dist folder with a "main.js" file.

          - By default without any configuration, webpack wants to see a file "index.js"
          inside a "src" folder. But it can be overriden in configuration.
        - By default without any configuration, webpack will create "dist/main.js".  
        Also by default it builds in production mode, so it will look a bit cryptic and already
        look a bit minified. It also wraps our code in eval statements.
	- Your code in dist/main.js is wrapped in webpack magic.

Rename "index.js" to some another name and run "npm run build" again. Now we see that webpack
fails.

To rund webpack from Grunt, we need to use the webpack config file. It can be called anything,
but convention is to call it webpack.congig.js. Create an empty file and add this to it:
const path = require("path");


module.exports = {
    mode: "development",
    devtool: "none",
    entry: "./src/index.js",
    output: {
        filename: "app.js",
        // Resolves the current directory to the relative path "dist".
        // __dirname is the directory in which this config file 
        // resides.
        path: path.resolve(__dirname, "dist")
    },
}

We shall set the mode to development mode so that our output file looks more readable for
development. setting devtool to none removes our code from the eval statements created by default.
entry is again our entry point. Output renames our bundled file to app.js and uses the default
"dist" folder but we could call it anything. We'll go with dist/app.js.

Now at the commandline run npm install --save-dev grunt-webpack. This will install the plugin that
allows us to run webpack from Grunt.

Add this to the top of Gruntfile.js
const webpackConfig = require('./webpack.config');

Add this to our gruntfile config
        webpack: {
            configFile: webpackConfig,
        },

Add this to Gruntfile.js after the line of code to load grunt-run:
    grunt.loadNpmTasks('grunt-webpack');

now type grunt build. You should see a readable "app.js" in the dist folder because we used production mode.
Your function is no longer wrapped in eval due to devtool none.

You may delete the dist folder and try again.

  Commit

  Update the build script in package.json with this:
      "build": "webpack --config webpack.config.js",

 Now you run run: npm run build, since build is not a script know to npm.

 Commit     