
1. npm init - y
	- This create the package.json file

2. Add "private": true to the object in package.json.
	- This prevents the package from being published.

pakage.json will contain
   "main": "index.js"
   This is an entry point to the node application.

 create folder "src" in the root directory.

 create index.js and leave it empty for now. 


Add git to make a Git repository.
    - git init    

Commit

Step 2
npm install --save-dev grunt

Now grunt is installed. 
Create "Gruntfile.js" include the following:
module.exports = grunt => {

    // Our main configuration.
    grunt.initConfig({});


    // Sample custom tasks...
    grunt.registerTask('speak', () => {
        console.log('Speaking...');
    });

    grunt.registerTask('yell', () => {
        console.log('YELLING...');
    });

    grunt.registerTask('both', ['speak', 'yell']);
}

This creates a bare-bones Gruntfile.js. We initialize our plugins in grunt.initConfig().
But we have no plugins are the moment. So we leave it empty.

We create two custom tasks that we can run with:
grunt speak
grunt yell.

We can combine them into a task called "both". speak ill eecute bfore yell.
grunt both


Commit

install Jest but to run Jest we need to be able to invoke it as a command from Grunt.
There is no supported Grunt plugin at this time.

npm install --save-dev grunt-run
npm install --save-dev jest

add the following to empty index.js so that we have something to test:
const addNumbers = (x, y) => {
    return x + y;
}

module.exports = addNumbers;

Create a "specs" folder in our project folder. In there create "index.spec.js". Add the following to it:

const addNumbers = require('../src/index');


describe("addNumber()", () => {

    it("should return 5", () => {

        const actualResult = addNumbers(2, 3);

        expect(actualResult).toEqual(5);
    });
});

Now we have somethign to test, and a test itself.But as stated earlier, there is not current
Jest Grunt plugin. So, replace our
test script in package.json with
    "test": "jest"

To make sure that this works.
Type "npm jest" at the terminal, and one should pass.

Now we need to configure grunt-run so that we can run this with Grunt.

Add this to Gruntfile.js our config section should now look like this:

    // Our main configuration.
    grunt.initConfig({
        run: {
            options: {
              // Task-specific options go here.
            },
            test: {
              cmd: 'npm',
              args: [
                'test'
              ]
            }
        }           
    });

Then add this line at the bottom of our Grunt function:
      grunt.loadNpmTasks('grunt-run');
      grunt.registerTask('test', ['run:test:cmd'])

This will now invoke our earlier command "npm test" from within Grunt itself as such:

Type: grunt test

Now we can invoke Jest from Grunt. It is also quite confusing to invoke Jest with webpack,
so we use Grunt to give us a consistent interface for issuing build and run commands.


Commit